use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.Game.InputMonitor
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Game.Graphics.Color
use Libraries.Compute.Random
use Libraries.Interface.Events.CollisionListener2D
use Libraries.Interface.Events.CollisionEvent2D
use Libraries.Compute.Math
use Libraries.Interface.Events.KeyboardListener
use Libraries.Sound.Audio

class Main is Game, CollisionListener2D, KeyboardListener
    Drawable circle
    Drawable target
    Color c
    InputMonitor monitor
    KeyboardEvent keys
    Random r

    integer speed = 200
    integer targetSpeed = 100
    integer xSpeed = 100
    integer ySpeed = 100
    integer score = 0
    integer circleRadius = 10
    integer targetSize = 30
    integer jumpSpeed = 50

    number time = 0
    number cumTime = 0
    number jumpTime = 1.0
    number cumJumpTime = 0
    
    boolean inJump = false

    Audio music
    Audio jump

    action Main
        StartGame()
    end

    action CreateGame
        circle:LoadFilledCircle(circleRadius)
        target:LoadFilledRectangle(targetSize, targetSize, c:Red())
        target:SetPosition(400, 300)
        circle:SetCollidable(true)
        target:SetCollidable(true)
        Add(circle)
        Add(target)
        time = r:RandomNumber()
        AddCollisionListener(me)
        AddKeyboardListener(me)

        //A little adorable royalty free music piece available 
        //here: http://www.bensound.com/royalty-free-music/track/cute
        music:Load("media/bensound-cute.ogg")
        music:EnableLooping()
        music:Play()

        jump:Load("media/fart.ogg")
    end

    action BeginCollision(CollisionEvent2D e)
        score = score + 1
        output "Score: " + score
        circle:SetPosition(0,0)
    end

    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:SPACE
            inJump = true
            cumJumpTime = 0
        end
    end


    action Update(number seconds)
        cumTime = cumTime + seconds
        if cumTime > time
            cumTime = 0
            time = r:RandomNumber()
            xSpeed = r:RandomIntegerBetween(-targetSpeed, targetSpeed)
            ySpeed = r:RandomIntegerBetween(-targetSpeed, targetSpeed)
        end
        number newX = target:GetX() + seconds * xSpeed
        number newY = target:GetY() + seconds * ySpeed
        if newX < targetSize or newX > 800 - targetSize
            xSpeed = -xSpeed
        end
        if newY < targetSize or newY > 600 - targetSize
            ySpeed = -ySpeed
        end
        target:SetX(newX)
        target:SetY(newY)
        number x = circle:GetX()
        number y = circle:GetY()
        if monitor:IsKeyPressed(keys:RIGHT)
            x = x + seconds * speed
            if x > (800 - circleRadius * 2)
                x = 800 - circleRadius * 2
            end
        elseif monitor:IsKeyPressed(keys:LEFT)
            x = x - seconds * speed
            if x < 0
                x = 0
            end
        elseif monitor:IsKeyPressed(keys:UP)
            if inJump = false
                cumJumpTime = 0
                inJump = true
            end
        elseif monitor:IsKeyPressed(keys:DOWN)
            
        elseif monitor:IsKeyPressed(keys:EQUALS)
            if targetSpeed > 0
                targetSpeed = targetSpeed + 20
            else
                targetSpeed = targetSpeed - 20
            end
        elseif monitor:IsKeyPressed(keys:MINUS)
            if targetSpeed = 0
                targetSpeed = 0
            elseif targetSpeed > 0
                targetSpeed = targetSpeed - 20
            else
                targetSpeed = targetSpeed + 20
            end
        end
        if inJump
            cumJumpTime = cumJumpTime + seconds
            if cumJumpTime < jumpTime * 0.40
            //move y up
                y = circle:GetY() + seconds * jumpSpeed
            elseif cumJumpTime < jumpTime * 0.60
            //pause at the top of the jump
            elseif cumJumpTime < jumpTime
            // move y down
                y = circle:GetY() - seconds * jumpSpeed
            else
            // jump ended
                inJump = false
            end
        end
        circle:SetX(x)
        circle:SetY(y)
    end
end
